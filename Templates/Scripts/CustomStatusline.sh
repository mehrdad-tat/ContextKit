#!/bin/bash
# Template Version: 3 | ContextKit: 0.2.5 | Updated: 2025-10-21

# Custom Claude Code statusline with beautiful colored progress bars
# Format: ⏱ 5h: ▓▓▓▓▓▓░░░░ 61% (2.3h left) | 🧠 Chat: ▓▓▓▓░░░░░░ 44% (87k/200k)
#
# Features:
# - Dynamic color gradients (green → yellow → red) based on usage
# - Dual progress bars for both 5h-Usage and Chat context
# - Smart time formatting (minutes or decimal hours)
# - Plan-based accurate cost tracking
#
# Usage: CustomStatusline.sh --plan Pro|Max5|Max20

# ⚠️ FOR DEVELOPERS: Do not edit this file - changes will be overwritten during ContextKit updates.
# Report bugs: https://github.com/mehrdad-tat/ContextKit/issues

#═══════════════════════════════════════════════════════════════════════════════
# Color Definitions (256-color ANSI palette)
#═══════════════════════════════════════════════════════════════════════════════

# Progress bar colors (gradient from safe to critical)
GREEN='\033[38;5;78m'       # Safe level (< 50%)
YELLOW='\033[38;5;220m'     # Warning level (50-79%)
ORANGE='\033[38;5;214m'     # High level (80-89%)
RED='\033[38;5;196m'        # Critical level (90%+)

# Text colors
GRAY='\033[38;5;246m'       # Subtle gray for labels
WHITE='\033[38;5;255m'      # Bright white for emphasis
DIM='\033[2m'               # Dimmed text
RESET='\033[0m'

# Icons (with fallback to ASCII)
ICON_TIME="⏱ "
ICON_BRAIN="🧠"
ICON_WARNING="⚠️ "

#═══════════════════════════════════════════════════════════════════════════════
# Configuration & Argument Parsing
#═══════════════════════════════════════════════════════════════════════════════

PLAN=""
SHOW_HELP=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --plan)
            PLAN="$2"
            shift 2
            ;;
        --help|-h)
            SHOW_HELP=true
            shift
            ;;
        *)
            echo "Unknown option: $1"
            echo "Usage: $0 --plan Pro|Max5|Max20"
            exit 1
            ;;
    esac
done

if [[ "$SHOW_HELP" == true ]]; then
    echo "Custom Claude Code Statusline"
    echo ""
    echo "Usage: $0 --plan Pro|Max5|Max20"
    echo ""
    echo "Plans:"
    echo "  Pro      - \$20/month plan with \$10 5-hour limit"
    echo "  Max5     - \$100/month plan with \$50 5-hour limit"
    echo "  Max20    - \$200/month plan with \$200 5-hour limit"
    echo ""
    echo "Example: $0 --plan Pro"
    exit 0
fi

# Validate plan parameter
if [[ -z "$PLAN" ]]; then
    echo -e "${RED}Error: --plan parameter is required${RESET}"
    echo "Usage: $0 --plan Pro|Max5|Max20"
    exit 1
fi

# Set block budget based on plan
case "$PLAN" in
    "Pro")
        BLOCK_BUDGET="10.00"
        ;;
    "Max5")
        BLOCK_BUDGET="50.00"
        ;;
    "Max20")
        BLOCK_BUDGET="200.00"
        ;;
    *)
        echo -e "${RED}Invalid plan: $PLAN${RESET}"
        echo "Valid plans: Pro, Max5, Max20"
        exit 1
        ;;
esac

# Allow environment variable override
BLOCK_BUDGET=${CLAUDE_BLOCK_BUDGET:-$BLOCK_BUDGET}

#═══════════════════════════════════════════════════════════════════════════════
# Progress Bar Generator (with color gradient)
#═══════════════════════════════════════════════════════════════════════════════

create_progress_bar() {
    local percent=$1
    local width=${2:-10}  # Default width: 10 characters

    # Calculate filled/empty portions
    local filled=$((percent * width / 100))
    local empty=$((width - filled))

    # Clamp values
    if [[ $filled -gt $width ]]; then filled=$width; fi
    if [[ $filled -lt 0 ]]; then filled=0; fi
    empty=$((width - filled))

    # Choose color based on percentage (gradient)
    local bar_color
    if [[ $percent -lt 50 ]]; then
        bar_color="$GREEN"
    elif [[ $percent -lt 80 ]]; then
        bar_color="$YELLOW"
    elif [[ $percent -lt 90 ]]; then
        bar_color="$ORANGE"
    else
        bar_color="$RED"
    fi

    # Build progress bar
    local bar="${bar_color}"
    for ((i=0; i<filled; i++)); do
        bar+="▓"
    done
    bar+="${GRAY}"
    for ((i=0; i<empty; i++)); do
        bar+="░"
    done
    bar+="${RESET}"

    echo -e "$bar"
}

#═══════════════════════════════════════════════════════════════════════════════
# Time Formatter (smart minutes/hours display)
#═══════════════════════════════════════════════════════════════════════════════

format_time_remaining() {
    local total_minutes=$1

    if [[ -z "$total_minutes" || $total_minutes -eq 0 ]]; then
        echo "0m"
        return
    fi

    if [[ $total_minutes -lt 60 ]]; then
        # Display in minutes if less than 1 hour
        echo "${total_minutes}m"
    else
        # Display in decimal hours with 1 decimal place
        local hours_decimal=$(echo "scale=1; $total_minutes / 60" | bc)
        echo "${hours_decimal}h"
    fi
}

#═══════════════════════════════════════════════════════════════════════════════
# Data Extraction from ccusage
#═══════════════════════════════════════════════════════════════════════════════

# Get ccusage data
ccusage_data=$(ccusage statusline 2>/dev/null)

if [[ $? -ne 0 ]] || [[ -z "$ccusage_data" ]]; then
    # Fallback if ccusage fails
    echo -e "${GRAY}${ICON_TIME}5h: ${DIM}loading...${RESET} ${GRAY}| ${ICON_BRAIN} Chat: ${DIM}loading...${RESET}"
    exit 0
fi

# Extract block time remaining (format: "block (13m left)" or "block (1h 13m left)")
block_time=$(echo "$ccusage_data" | grep -o 'block ([^)]*left)' | sed 's/block (\|)//g')

# Extract context tokens and percentage
context_tokens=$(echo "$ccusage_data" | grep -o '🧠[[:space:]]*[0-9,]\+' | grep -o '[0-9,]\+')
context_percent=$(echo "$ccusage_data" | grep -o '([0-9]\+%)' | grep -o '[0-9]\+')

# Parse block cost from ccusage output (e.g., "$0.45 block (2h 45m left)")
block_cost=$(echo "$ccusage_data" | grep -o '\$[0-9.]\+ block' | grep -o '[0-9.]\+')

#═══════════════════════════════════════════════════════════════════════════════
# Parse Time Remaining
#═══════════════════════════════════════════════════════════════════════════════

total_minutes_left=0

if [[ "$block_time" =~ ([0-9]+)h[[:space:]]+([0-9]+)m[[:space:]]+left ]]; then
    # Format: "1h 13m left"
    hours_left=${BASH_REMATCH[1]}
    minutes_left=${BASH_REMATCH[2]}
    total_minutes_left=$((hours_left * 60 + minutes_left))
elif [[ "$block_time" =~ ([0-9]+)m[[:space:]]+left ]]; then
    # Format: "13m left"
    minutes_left=${BASH_REMATCH[1]}
    total_minutes_left=$minutes_left
fi

#═══════════════════════════════════════════════════════════════════════════════
# Calculate 5h-Usage Metrics
#═══════════════════════════════════════════════════════════════════════════════

if [[ -n "$block_cost" && -n "$BLOCK_BUDGET" ]]; then
    # Calculate usage percentage based on API cost
    usage_percent=$(echo "scale=0; ($block_cost * 100) / $BLOCK_BUDGET" | bc)
    if [[ $usage_percent -gt 100 ]]; then usage_percent=100; fi

    # Format time display
    time_display=$(format_time_remaining $total_minutes_left)

    # Create progress bar for 5h-Usage
    usage_bar=$(create_progress_bar $usage_percent 10)

    # Choose text color based on usage level
    if [[ $usage_percent -lt 50 ]]; then
        usage_color="$GREEN"
    elif [[ $usage_percent -lt 80 ]]; then
        usage_color="$YELLOW"
    elif [[ $usage_percent -lt 90 ]]; then
        usage_color="$ORANGE"
    else
        usage_color="$RED"
    fi

    # Build 5h-Usage display
    usage_info="${GRAY}${ICON_TIME}5h:${RESET} ${usage_bar} ${usage_color}${usage_percent}%${RESET} ${GRAY}(${time_display} left)${RESET}"
else
    usage_info="${GRAY}${ICON_TIME}5h: ${DIM}parsing...${RESET}"
fi

#═══════════════════════════════════════════════════════════════════════════════
# Calculate Chat Context Metrics
#═══════════════════════════════════════════════════════════════════════════════

if [[ -n "$context_tokens" && -n "$context_percent" ]]; then
    # Convert tokens to k format (round up)
    tokens_clean=$(echo "$context_tokens" | tr -d ',')
    tokens_k=$(((tokens_clean + 999) / 1000))

    # Create progress bar for Chat context
    context_bar=$(create_progress_bar $context_percent 10)

    # Choose text color based on context level
    if [[ $context_percent -lt 50 ]]; then
        context_color="$GREEN"
    elif [[ $context_percent -lt 80 ]]; then
        context_color="$YELLOW"
    elif [[ $context_percent -lt 90 ]]; then
        context_color="$ORANGE"
    else
        context_color="$RED"
    fi

    # Build Chat context display
    context_info="${GRAY}${ICON_BRAIN} Chat:${RESET} ${context_bar} ${context_color}${context_percent}%${RESET} ${GRAY}(${tokens_k}k/200k)${RESET}"
else
    context_info="${GRAY}${ICON_BRAIN} Chat: ${DIM}parsing...${RESET}"
fi

#═══════════════════════════════════════════════════════════════════════════════
# Output Final Statusline
#═══════════════════════════════════════════════════════════════════════════════

echo -e "${usage_info} ${GRAY}|${RESET} ${context_info}"
